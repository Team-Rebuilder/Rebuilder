import { Component, ElementRef, inject, input, viewChild } from '@angular/core';
import { MatSliderModule } from '@angular/material/slider';
import { FormsModule } from '@angular/forms';
// Use the legacy build of pdfjs-dist to avoid compatibility issues
// https://stackoverflow.com/a/79258182
import * as pdfjsLib from 'pdfjs-dist/legacy/build/pdf.min.mjs';

import { ModelnavbarComponent } from '../modelnavbar/modelnavbar.component';
import { PDFDocumentProxy } from 'pdfjs-dist';
import { ModelsService } from '../../services/models.service';

pdfjsLib.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@4.9.155/build/pdf.worker.min.mjs`;

@Component({
  selector: 'app-instruction',
  standalone: true,
  imports: [ModelnavbarComponent, MatSliderModule, FormsModule],
  templateUrl: './instruction.component.html',
  styleUrl: './instruction.component.css'
})

// This component was adapted from a ChatGPT generation:
// https://chatgpt.com/share/67529b54-7d84-8001-ab91-74f2566228d3

export class InstructionComponent {
  modelsService = inject(ModelsService);
  private currModel$: any;

  id = input.required<string>();
  src = input.required<string>();
  private pdfCanvas = viewChild<ElementRef>('pdfCanvas');
  private offscreenCanvas = document.createElement('canvas');
  private pdf: PDFDocumentProxy | null = null;
  private pdfUrl: string = "";
  currentPage: number = 1;
  formerPage: number = -1;
  pageCount: number = 0;

  private mouseButtonPressed: boolean = false;

  async ngOnInit(): Promise<void> {
    // Event listener code generated by GitHub Copilot

    // Event listeners for mouse clicks
    window.addEventListener('mousedown', () => this.mouseButtonPressed = true);
    window.addEventListener('mouseup', () => this.mouseButtonPressed = false);

    // Event listener for arrow key navigation
    window.addEventListener('keydown', this.handleKeyDown.bind(this));

    // Get the model by id
    this.currModel$ = await this.modelsService.getModelById(this.id());

    // Retrieve PDF URL, load PDF, and begin rendering
    this.pdfUrl = this.currModel$.instructionUrls[0];
    this.loadPdf().then(() => {
      requestAnimationFrame(() => this.renderPdf());
    });
  }

  ngOnDestroy() {
    window.removeEventListener('mousedown', () => this.mouseButtonPressed = true);
    window.removeEventListener('mouseup', () => this.mouseButtonPressed = false);
    window.removeEventListener('keydown', this.handleKeyDown.bind(this));
  }

  // Initialize the PDF document
  async loadPdf() {
    const pdf = await pdfjsLib.getDocument(this.pdfUrl).promise;
    this.pdf = pdf;
    this.pageCount = pdf.numPages;
  }

  // Internally render a page of the PDF using an offscreen canvas
  async renderPage(pageNumber: number, offscreenCanvas: HTMLCanvasElement) {
    if (this.pdf) {
      const page = await this.pdf.getPage(pageNumber);

      const context = this.offscreenCanvas.getContext('2d')!;
      // Set larger scale to avoid strange line artifact on the canvas
      const viewport = page.getViewport({ scale: 1.5 });

      offscreenCanvas.width = viewport.width;
      offscreenCanvas.height = viewport.height;

      await page.render({ canvasContext: context, viewport: viewport }).promise;
    }
  }

  // Copy any newly rendered page to the visible canvas
  // Double-buffered approach to avoid flickering, implemented by GitHub Copilot
  renderPdf() {
    if (this.currentPage !== this.formerPage) {
      this.formerPage = this.currentPage;

      // Tell the PDF canvas to render the offscreen canvas
      this.renderPage(this.currentPage, this.offscreenCanvas).then(() => {
        const pdfCanvas = this.pdfCanvas()?.nativeElement;
        const context = pdfCanvas.getContext('2d')!;
        pdfCanvas.width = this.offscreenCanvas.width;
        pdfCanvas.height = this.offscreenCanvas.height;
        context.drawImage(this.offscreenCanvas, 0, 0);
      });
    }
    // Delay page render to avoid buggy concurrent canvas renders
    // TODO: look into alternative PDF packages for faster rendering
    setTimeout(() => requestAnimationFrame(() => this.renderPdf()), 300);
  }

  // Code generated by GitHub Copilot using the prompt:
  // "How do I add event listeners for arrow keys to call nextPage() and previousPage()?"
  handleKeyDown(event: KeyboardEvent) {
    if (!this.mouseButtonPressed) {
      if (event.key === 'ArrowRight') {
        this.nextPage();
      } else if (event.key === 'ArrowLeft') {
        this.previousPage();
      }
    }
  }

  // Prevent non-standard arrow key navigation using slider
  doNothing(event: KeyboardEvent) {
    event.preventDefault();
  }

  nextPage() {
    if (this.currentPage < this.pageCount) {
      this.currentPage++;
    }
  }

  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
    }
  }
}
